import ROOT
import math 
import numpy as np


root_dtype = {
  float: 'D',  int: 'I',  bool: 'O',
  'f':   'D',  'i': 'I',  '?':  'O',  'b': 'b'
}
num_dtype = {
  'D':   'f',  'I': 'i',  'O':  '?',  'b': 'b'
}

class TreeProducer(object):

    def __init__(self, name):
        print('TreeProducer is called', name)

        # TREE
        self.outputfile = ROOT.TFile(name, 'RECREATE')
        self.tree = ROOT.TTree('tree','tree')
        
        # HISTOGRAM
        
        ##################
        # trees branches #
        ##################
        self.addBranch('isMC', bool)
        self.addBranch('is2016', bool)
        self.addBranch('is2017', bool)
        self.addBranch('is2018', bool)
        self.addBranch('EventNumber', int)
        self.addBranch('LumiNumber', int)
        self.addBranch('RunNumber', int)
        self.addBranch('EventWeight', float)
        self.addBranch('LumiWeight', float)
        self.addBranch('GeneratorWeight', float)
        self.addBranch('TopWeight', float)
        self.addBranch('BTagWeight', float)
        self.addBranch('BTagWeightCorr', float)
        self.addBranch('BTagWeight_nocorr', float)
        self.addBranch('BTagWeight_comb', float)
        self.addBranch('BTagWeight_combUp', float)
        self.addBranch('BTagWeight_combDown', float)
        self.addBranch('BTagWeight_jesUp', float)
        self.addBranch('BTagWeight_jesDown', float)
        self.addBranch('BTagWeight_lfUp', float)
        self.addBranch('BTagWeight_lfDown', float)
        self.addBranch('BTagWeight_hfUp', float)
        self.addBranch('BTagWeight_hfDown', float)
        self.addBranch('BTagWeight_hfstats1Up', float)
        self.addBranch('BTagWeight_hfstats1Down', float)
        self.addBranch('BTagWeight_hfstats2Up', float)
        self.addBranch('BTagWeight_hfstats2Down', float)
        self.addBranch('BTagWeight_lfstats1Up', float)
        self.addBranch('BTagWeight_lfstats1Down', float)
        self.addBranch('BTagWeight_lfstats2Up', float)
        self.addBranch('BTagWeight_lfstats2Down', float)
        self.addBranch('BTagWeight_cferr1Up', float)
        self.addBranch('BTagWeight_cferr1Down', float)
        self.addBranch('BTagWeight_cferr2Up', float)
        self.addBranch('BTagWeight_cferr2Down', float)
        self.addBranch('PUIdWeight', float)
        self.addBranch('PUIdWeight_up', float)
        self.addBranch('PUIdWeight_down',float)
        self.addBranch('GenWeight', float)
        self.addBranch('PUWeight', float)
        self.addBranch('PUWeight_up', float)
        self.addBranch('PUWeight_down', float)
        self.addBranch('PUWeight_old', float)
        self.addBranch('MuWeight', float)
        self.addBranch('MuWeight_up', float)
        self.addBranch('MuWeight_down', float)
        self.addBranch('MuTriggerWeight', float)
        self.addBranch('MuTriggerWeight_gen', float)
        self.addBranch('MuTriggerWeight_fit', float)
        self.addBranch('MuTriggerWeight_up', float)
        self.addBranch('MuTriggerWeight_down', float)
        self.addBranch('MuTriggerWeight_old', float)
        self.addBranch('MuTriggerWeight_sl', float)
        self.addBranch('MuTriggerWeight_cross', float)
        self.addBranch('MuTriggerWeight_crossold', float)
        self.addBranch('MuTriggerWeight_lepcross', float)
        self.addBranch('MuTriggerWeight_taucross', float)
        self.addBranch('EWeight', float)
        self.addBranch('EWeight_up', float)
        self.addBranch('EWeight_down', float)
        self.addBranch('ETriggerWeight', float)
        self.addBranch('ETriggerWeight_gen', float)
        self.addBranch('ETriggerWeight_fit', float)
        self.addBranch('ETriggerWeight_up', float)
        self.addBranch('ETriggerWeight_down', float)
        self.addBranch('ETriggerWeight_35', float)
        self.addBranch('ETriggerWeight_old', float)
        self.addBranch('ETriggerWeight_sl', float)
        self.addBranch('ETriggerWeight_cross', float)
        self.addBranch('ETriggerWeight_crossold', float)
        self.addBranch('ETriggerWeight_lepcross', float)
        self.addBranch('ETriggerWeight_taucross', float)
        self.addBranch('TauWeight', float)
        self.addBranch('TauWeight_up', float)
        self.addBranch('TauWeight_down', float)
        self.addBranch('TauWeightVSjet', float)
        self.addBranch('TauWeightVSjet_up', float)
        self.addBranch('TauWeightVSjet_down', float)
        self.addBranch('TauWeightVSjet_1prong_up', float)
        self.addBranch('TauWeightVSjet_1prong_down', float)
        self.addBranch('TauWeightVSjet_1prong1pi_up', float)
        self.addBranch('TauWeightVSjet_1prong1pi_down', float)
        self.addBranch('TauWeightVSjet_3prong_up', float)
        self.addBranch('TauWeightVSjet_3prong_down', float)
        self.addBranch('TauWeightVSmu', float)
        self.addBranch('TauWeightVSmu_up', float)
        self.addBranch('TauWeightVSmu_down', float)
        self.addBranch('TauWeightVSe', float)
        self.addBranch('TauWeightVSe_up', float)
        self.addBranch('TauWeightVSe_down', float)
        self.addBranch('PrefireWeight', float)
        self.addBranch('PrefireWeight_up', float)
        self.addBranch('PrefireWeight_down', float)
        self.addBranch('TauEmbedding_TriggerWeight', float)
        self.addBranch('TauEmbedding_IdWeight', float)
        self.addBranch('isHtoMuTau', bool)
        self.addBranch('isHtoETau', bool)
        self.addBranch('isHtoMuTauAR', bool)
        self.addBranch('isHtoETauAR', bool)
        self.addBranch('isHtolooseMuTau', bool)
        self.addBranch('isHtolooseMuTauAR', bool)
        self.addBranch('isHtolooseETau', bool)
        self.addBranch('isHtolooseETauAR', bool)
        self.addBranch('isTTCR', bool)
        self.addBranch('isMuMu', bool)
        self.addBranch('dimuon_veto', bool)
        self.addBranch('dielectron_veto', bool)
        self.addBranch('muon_veto', bool)
        self.addBranch('extra_muon_veto', bool)
        self.addBranch('extra_electron_veto', bool)
        self.addBranch('electron_veto', bool)
        self.addBranch('nPV', int)
        self.addBranch('nTaus_vetomu', int)
        self.addBranch('nTaus_vetoe', int)
        self.addBranch('nElectrons', int)
        self.addBranch('nMuons', int)
        self.addBranch('nElectrons_veto', int)
        self.addBranch('nMuons_veto', int)
        self.addBranch('nJets', int)
        self.addBranch('nJets_forward', int)
        self.addBranch('nGenBjets', int)
        self.addBranch('LHE_Nb', int)
        self.addBranch('LHE_Nc', int)
        self.addBranch('LHE_Njets', int)
        self.addBranch('LHE_NpLO', int)
        self.addBranch('LHE_NpNLO', int)
        self.addBranch('LHEPdfWeight', float)
        self.addBranch('LHEScaleWeightUp', float)
        self.addBranch('LHEScaleWeightDown', float)
        self.addBranch('LHEScaleWeightMURUp', float)
        self.addBranch('LHEScaleWeightMURDown', float)
        self.addBranch('LHEScaleWeightMUFUp', float)
        self.addBranch('LHEScaleWeightMUFDown', float)
        self.addBranch('PSWeightISRUp', float)
        self.addBranch('PSWeightISRDown', float)
        self.addBranch('PSWeightFSRUp', float)
        self.addBranch('PSWeightFSRDown', float)
        self.addBranch('LHE_Vpt', float)
        self.addBranch('nBjets_l', int)
        self.addBranch('nBjets_m', int)
        self.addBranch('nBjets_t', int)
        self.addBranch('nBjets_l_excl', int)
        self.addBranch('nBjets_m_excl', int)
        self.addBranch('Jet1_pt', float)
        self.addBranch('Jet1_eta', float)
        self.addBranch('Jet1_phi', float)
        self.addBranch('Jet1_mass', float)
        self.addBranch('Jet1_btag', float)
        self.addBranch('Jet1_hadronFlavour', float)
        self.addBranch('Jet1_nMuons', int)
        self.addBranch('Jet1_nElectrons', int)
        self.addBranch('Jet1_nConstituents', int)
        self.addBranch('Jet2_pt', float)
        self.addBranch('Jet2_eta', float)
        self.addBranch('Jet2_phi', float)
        self.addBranch('Jet2_mass', float)
        self.addBranch('Jet2_btag', float)
        self.addBranch('Jet2_hadronFlavour', float)
        self.addBranch('Jet2_nMuons', int)
        self.addBranch('Jet2_nElectrons', int)
        self.addBranch('Jet2_nConstituents', int)
        self.addBranch('Jet3_pt', float)
        self.addBranch('Jet3_eta', float)
        self.addBranch('Jet3_phi', float)
        self.addBranch('Jet3_mass', float)
        self.addBranch('Jet3_btag', float)
        self.addBranch('Jet3_hadronFlavour', float)
        self.addBranch('Jet3_nMuons', int)
        self.addBranch('Jet3_nElectrons', int)
        self.addBranch('Jet3_nConstituents', int)
        self.addBranch('Bjet1_pt', float)
        self.addBranch('Bjet1_eta', float)
        self.addBranch('Bjet1_phi', float)
        self.addBranch('Bjet1_mass', float)
        self.addBranch('Bjet2_pt', float)
        self.addBranch('Bjet2_eta', float)
        self.addBranch('Bjet2_phi', float)
        self.addBranch('Bjet2_mass', float)
        self.addBranch('Mu1_pt', float)
        self.addBranch('Mu1_eta', float)
        self.addBranch('Mu1_phi', float)
        self.addBranch('Mu1_mass', float)
        self.addBranch('Mu1_charge', float)
        self.addBranch('Mu1_iso', float)
        self.addBranch('Mu1_genmatch', int)
        self.addBranch('Mu1_sltrig_fired', bool)
        self.addBranch('Mu1_ctrig_fired', bool)
        self.addBranch('Mu1_ctrig_HPS_fired', bool)
        self.addBranch('Mu1_ctrig_noHPS_fired', bool)
        self.addBranch('Mu2_pt', float)
        self.addBranch('Mu2_eta', float)
        self.addBranch('Mu2_phi', float)
        self.addBranch('Mu2_mass', float)
        self.addBranch('Mu2_charge', float)
        self.addBranch('Mu2_iso', float)
        self.addBranch('Mu2_genmatch', int)
        self.addBranch('Ele1_pt', float)
        self.addBranch('Ele1_eta', float)
        self.addBranch('Ele1_phi', float)
        self.addBranch('Ele1_mass', float)
        self.addBranch('Ele1_charge', float)
        self.addBranch('Ele1_iso', float)
        self.addBranch('Ele1_genmatch', int)
        self.addBranch('Ele1_sltrig_fired', bool)
        self.addBranch('Ele1_sl32trig_fired', bool)
        self.addBranch('Ele1_sl35trig_fired', bool)
        self.addBranch('Ele1_ctrig_fired', bool)
        self.addBranch('Ele1_ctrig_HPS_fired', bool)
        self.addBranch('Ele1_ctrig_noHPS_fired', bool)
        self.addBranch('Tau1_pt', float)
        self.addBranch('Tau1_eta', float)
        self.addBranch('Tau1_phi', float)
        self.addBranch('Tau1_mass', float)
        self.addBranch('Tau1_charge', float)
        self.addBranch('Tau1_iso', float)
        self.addBranch('Tau1_decaymode', float)
        self.addBranch('Tau1_genmatch', int)
        self.addBranch('Tau1_Idvsjet', int)
        self.addBranch('Tau1_Idvse', int)
        self.addBranch('Tau1_Idvsmu', int)
        self.addBranch('Tau1_ES',float)
        self.addBranch('Tau1_ctrig_fired', bool)
        self.addBranch('Tau1_ctrig_HPS_fired', bool)
        self.addBranch('Tau1_ctrig_noHPS_fired', bool)
        self.addBranch('vistau1_pt', float)
        self.addBranch('vistau1_eta', float)
        self.addBranch('vistau1_phi', float)
        self.addBranch('vistau1_mass', float)
        self.addBranch('vistau1_energy', float)
        self.addBranch('vistau2_pt', float)
        self.addBranch('vistau2_eta', float)
        self.addBranch('vistau2_phi', float)
        self.addBranch('vistau2_mass', float)
        self.addBranch('vistau2_energy', float)
        self.addBranch('H_pt', float)
        self.addBranch('H_eta', float)
        self.addBranch('H_phi', float)
        self.addBranch('H_mass', float)
        self.addBranch('mt2', float)
        self.addBranch('vis_pt', float)
        self.addBranch('vis_eta', float)
        self.addBranch('vis_phi', float)
        self.addBranch('vis_mass', float)
        self.addBranch('MET', float)
        self.addBranch('MET_puppi', float)
        self.addBranch('MET_chs', float)
        self.addBranch('MET_phi', float)
        self.addBranch('MET_puppi_phi', float)
        self.addBranch('MET_chs_phi', float)
        self.addBranch('MET_px', float)
        self.addBranch('MET_py', float)
        self.addBranch('MET_covXX', float)
        self.addBranch('MET_covXY', float)
        self.addBranch('MET_covYY', float)
        self.addBranch('transverse_mass_lepmet', float)
        self.addBranch('mt', float)
        self.addBranch('mt_up', float)
        self.addBranch('mt_down', float)
        self.addBranch('transverse_mass_taumet', float)
        self.addBranch('transverse_mass_leptau', float)
        self.addBranch('transverse_mass_total', float)
        self.addBranch('H_mass_gen', float)
        self.addBranch('collinear_mass', float)
        self.addBranch('m_col', float)
        self.addBranch('collinear_mass_chs', float)
        self.addBranch('wt_ff', float)
        self.addBranch('wt_ff_nocorr', float)
        self.addBranch('wt_ff_nocorr_up', float)
        self.addBranch('wt_ff_nocorr_down', float)
        self.addBranch('wt_ff_nocorr_flat', float)
        self.addBranch('wt_ff_ttdr', float)
        self.addBranch('wt_ff_norm', float)
        self.addBranch('wt_ff_qcddr', float)
        self.addBranch('wt_ff_qcd', float)
        self.addBranch('wt_ff_w', float)
        self.addBranch('wt_ff_tt', float)
        self.addBranch('wt_ff_qcd_old', float)
        self.addBranch('wt_ff_w_old', float)
        self.addBranch('wt_ff_tt_old', float)
        self.addBranch('wt_ff_qcd_flat', float)
        self.addBranch('wt_ffcorr_hmass_qcd', float)
        self.addBranch('wt_ffcorr_jetpt_qcd', float)
        self.addBranch('wt_ffcorr_collinearmass_qcd', float)
        self.addBranch('wt_ffcorr_taujmass_qcd', float)
        self.addBranch('wt_ffcorr_hmass_tt', float)
        self.addBranch('wt_ffcorr_jetpt_tt', float)
        self.addBranch('wt_ffcorr_collinearmass_tt', float)
        self.addBranch('wt_ffcorr_taujmass_tt', float)
        self.addBranch('wt_ffUp', float)
        self.addBranch('wt_ffDown', float)
        self.addBranch('wt_ff_qcdUp', float)
        self.addBranch('wt_ff_qcdDown', float)
        self.addBranch('wt_ff_wUp', float)
        self.addBranch('wt_ff_wDown', float)
        self.addBranch('wt_ff_ttUp', float)
        self.addBranch('wt_ff_ttDown', float)
        self.addBranch('wt_ff_qcdfitpar0Up', float)
        self.addBranch('wt_ff_qcdfitpar0Down', float)
        self.addBranch('wt_ff_qcdfitpar1Up', float)
        self.addBranch('wt_ff_qcdfitpar1Down', float)
        self.addBranch('wt_ff_wfitpar0Up', float)
        self.addBranch('wt_ff_wfitpar0Down', float)
        self.addBranch('wt_ff_wfitpar1Up', float)
        self.addBranch('wt_ff_wfitpar1Down', float)
        self.addBranch('wt_ff_wfitpar2Up', float)
        self.addBranch('wt_ff_wfitpar2Down', float)
        self.addBranch('wt_ff_ttfitpar0Up',float)
        self.addBranch('wt_ff_ttfitpar0Down', float)
        self.addBranch('wt_ff_ttfitpar1Up', float)
        self.addBranch('wt_ff_ttfitpar1Down' , float)
        self.addBranch('wt_ff_fracUp', float)
        self.addBranch('wt_ff_fracDown',float)
        self.addBranch('wt_dy', float)
        self.addBranch('wt_dy_up', float)
        self.addBranch('wt_dy_down', float)
        self.addBranch('wt_dy_1b_up', float)
        self.addBranch('wt_dy_1b_down', float)
        self.addBranch('wt_dy_2b_up', float)
        self.addBranch('wt_dy_2b_down', float)
        self.addBranch('wt_dy_ttxsecup', float)
        self.addBranch('wt_dy_ttxsecdown', float)
        self.addBranch('wt_dy_1b_ttxsecup', float)
        self.addBranch('wt_dy_1b_ttxsecdown', float)
        self.addBranch('wt_dy_2b_ttxsecup', float)
        self.addBranch('wt_dy_2b_ttxsecdown', float)
        self.addBranch('wt_dy_old', float)
        self.addBranch('wt_dy_reco', float)
        self.addBranch('wt_tt', float)
        self.addBranch('wt_tt_pol1', float)
        self.addBranch('wt_tt_pol2', float)
        self.addBranch('wt_tt_pt', float)
        self.addBranch('wt_tt_pt_up', float)
        self.addBranch('wt_tt_pt_down', float)
        self.addBranch('wt_w', float)
        self.addBranch('wt_dy_nlo', float)
        self.addBranch('wt_w_nlo', float)
        self.addBranch('ffunc_qcd', float)
        self.addBranch('ffunc_w', float)
        self.addBranch('ffunc_tt', float)
        self.addBranch('ff_fitunc_qcd', float)
        self.addBranch('ff_fitunc_qcd_par0_up', float)
        self.addBranch('ff_fitunc_qcd_par0_down', float)
        self.addBranch('ff_fitunc_qcd_par1_up', float)
        self.addBranch('ff_fitunc_qcd_par1_down', float)
        self.addBranch('ff_fitunc_w', float)
        self.addBranch('ff_fitunc_w_par0_up', float)
        self.addBranch('ff_fitunc_w_par0_down', float)
        self.addBranch('ff_fitunc_w_par1_up', float)
        self.addBranch('ff_fitunc_w_par1_down', float)
        self.addBranch('ff_fitunc_w_par2_up', float)
        self.addBranch('ff_fitunc_w_par2_down', float)
        self.addBranch('ff_fitunc_tt', float)
        self.addBranch('ff_fitunc_tt_par0_up', float)
        self.addBranch('ff_fitunc_tt_par0_down', float)
        self.addBranch('ff_fitunc_tt_par1_up', float)
        self.addBranch('ff_fitunc_tt_par1_down', float)
        self.addBranch('Dzeta', float)
        self.addBranch('DPhi', float)
        self.addBranch('DEta', float)
        self.addBranch('DEta_jets_forward', float)
        self.addBranch('DPhiLepMET', float)
        self.addBranch('DRLepMET', float)
        self.addBranch('DRBjets', float)
        self.addBranch('DRBjets_lm', float)
        self.addBranch('DRBjets_mt', float)
        self.addBranch('DEta_Bjets', float)
        self.addBranch('DPhi_Bjets', float)
        self.addBranch('Bjets_pt', float)
        self.addBranch('dijet_pt', float)
        self.addBranch('dijet_eta', float)
        self.addBranch('dijet_phi', float)
        self.addBranch('dijet_mass', float)
        self.addBranch('DRjets', float)
        self.addBranch('DEta_jets', float)
        self.addBranch('DPhi_jets', float)
        self.addBranch('vistauMET_pt', float)
        self.addBranch('LepJ_mass', float)
        self.addBranch('TauJ_mass', float)
        self.addBranch('Taudijet_mass', float)
        self.addBranch('vistauJ_mass', float)
        self.addBranch('vistauJMET_mass', float)
        self.addBranch('TauJMET_mass', float)
        self.addBranch('LepJMET_mass', float)
        self.addBranch('METJ_mass', float)
        self.addBranch('LepJ_pt', float)
        self.addBranch('TauJ_pt', float)
        self.addBranch('vistauJ_pt', float)
        self.addBranch('vistauJMET_pt', float) 
        self.addBranch('TauJMET_pt', float)
        self.addBranch('LepJMET_pt', float)
        self.addBranch('METJ_pt', float)
        self.addBranch('DRTauJ', float)
        self.addBranch('DEtaTauJ', float)
        self.addBranch('DPhiTauJ', float)
        self.addBranch('DRLepJ', float)
        self.addBranch('DEtaLepJ', float)
        self.addBranch('DPhiLepJ', float)
        self.addBranch('DRTauJ2', float)
        self.addBranch('DEtaTauJ2', float)
        self.addBranch('DPhiTauJ2', float)
        self.addBranch('DRLepJ2', float)
        self.addBranch('DEtaLepJ2', float)
        self.addBranch('DPhiLepJ2', float)
        self.addBranch('HJ_mass', float)
        self.addBranch('HJ_pt', float)
        self.addBranch('DRHJ', float)
        self.addBranch('DEtaHJ', float)
        self.addBranch('DPhiHJ', float)
        self.addBranch('HJ2_mass', float)
        self.addBranch('HJ2_pt', float)
        self.addBranch('DRHJ2', float)
        self.addBranch('DEtaHJ2', float)
        self.addBranch('DPhiHJ2', float)
        self.addBranch('TTCR_Mufired', float)
        self.addBranch('TTCR_Efired', float)
        self.addBranch('HPStrigger', bool)
        self.addBranch('HPStrigger_error', bool)
        self.addBranch('MuTrigger_fired', bool)
        self.addBranch('MuTauTrigger_fired', bool)
        self.addBranch('MuTauTrigger_HPS_fired', bool)
        self.addBranch('MuTauTrigger_noHPS_fired', bool)
        self.addBranch('ETrigger_fired', bool)
        self.addBranch('E32Trigger_fired', bool)
        self.addBranch('E35Trigger_fired', bool)
        self.addBranch('ETauTrigger_fired', bool)
        self.addBranch('ETauTrigger_HPS_fired', bool)
        self.addBranch('ETauTrigger_noHPS_fired', bool)
        self.addBranch('METTrigger_fired', bool)
        self.addBranch('MuTriggermatch', bool)
        self.addBranch('ETriggermatch', bool)

    def addBranch(self, name, dtype=float):
        """Add branch with a given name, and create an array of the same name as address."""
        if hasattr(self,name):
          print("ERROR! TreeProducer.addBranch: Branch of name '%s' already exists!"%(name))
          exit(1)
        setattr(self,name,np.zeros(1,dtype=dtype))
        self.tree.Branch(name, getattr(self,name), '%s/%s'%(name,root_dtype[dtype]))
